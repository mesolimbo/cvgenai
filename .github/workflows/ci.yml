name: CI

permissions:
  contents: read

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv

      - name: Cache pipenv virtualenv
        uses: actions/cache@v4
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pipenv-

      - name: Install dependencies
        run: |
          pipenv install --dev
          pipenv install pytest pytest-cov

      - name: Verify pytest installation
        run: |
          pipenv run python -m pytest --version

      - name: Run tests
        run: |
          chmod +x ./test.sh
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          ./test.sh

  release:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Determine version
        id: get_version
        run: |
          ver=$(python .github/scripts/get_version.py)
          echo "version=$ver" >> "$GITHUB_OUTPUT"

      - name: Check if tag exists
        id: check_tag
        run: |
          exists=$(python .github/scripts/check_tag_exists.py "v${{ steps.get_version.outputs.version }}")
          echo "exists=$exists" >> "$GITHUB_OUTPUT"

      - name: Show release details
        run: |
          echo "Version to release: ${{ steps.get_version.outputs.version }}"

      - name: Create tag
        if: github.event_name == 'push' && steps.check_tag.outputs.exists == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag "v${{ steps.get_version.outputs.version }}"
          git push origin "v${{ steps.get_version.outputs.version }}"

      - name: Create GitHub release
        if: github.event_name == 'push' && steps.check_tag.outputs.exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ steps.get_version.outputs.version }}"
          release_name: "v${{ steps.get_version.outputs.version }}"
